#!/usr/bin/env python
# -*- coding: utf-8 -*-

__doc__ = \
"""
Run dedupe on all ingested media, to generate two lookup tables:

   {global_image_id:cluster_id}
   {cluster_id:global_image_id}


## Process

Baseline approach uses manual engineered features having minimal flexibility and minimal training supervision used only
for e.g. adjusting the similarity threshold hyperparameter.

Advanced approach relies on more flexible models, trained via supervised training data, and with less reliance on
manual feature engineering or hyper-parameter tuning.

1) [Baseline & Advanced]: For all ingested media, lookup ~100 candidate duplicates. This can be done by:
   - Exact matching on feature-engineered blocking predicates
     (e.g. exact match on stemmed and normalized text strings.)
   - Approximate kNN on unsupervised, feature-engineered hashing descriptors or vector embeddings
     (e.g. pHash, dHash, tf-IDF).
   - Approximate kNN lookup, on vectors created from a model learned via training supervision
     (e.g. Representation learning model trained on a margin ranking triplet-loss.)
2) [Baseline]: It decides there's a match if a pair of media exceeds a similarity threashold.
3) [Advanced]: applies a second layer of dedupe classification on all pairs in each candidate block.
4) [Baseline & Advanced]: Pairwise decisions are fed into an agglomerative clustering, producing a flat clustering.


TODO:
   - Migrate from simple baselines to sophisticated models.
   - Store dedupe lookup tables on something other than ES?

"""

from mc_generic import setup_main, pretty_print
import tornado


def dedupe_lookup_async(q_media,
                        index_name,
                        doc_type,
                        duplicate_mode = 'baseline',
                        incremental = False,
                        es = False,
                        ):
    """
    (TODO: may just switch this to a non-async version with timeouts.)
    
    Get list of all duplicates of a media work, from previously-generated duplicate lookup tables
    generated by `dedupe_all`.
    
    `baseline` mode: Starting with simple exact-matching on an engineered content-based semantic hash.
    
    `advanced` mode: TODO.
    
    Args:
        duplicate_mode:  Semantic duplicate type or matching mode. For now, defaults to 'baseline'.
        q_media:         Media to look up. See `Media Identifiers`.
        es:              Database client handle. For `baseline`, it's an elasticsearch client handle.
        incremental:     Attempt to dedupe never-before-seen media file versus pre-ingested media files.
    
    Returns:
                         List of matching media IDs of form: [{'id':'ifps://123...'}, {'id':'ifps://456...'},...]
    """

    assert duplicate_mode == 'baseline','DUPLICATE_MODE_NOT_IMPLEMENTED'

    #Lookup cluster ID for media ID:
    
    rr = yield es.search(index = index_name +  '_m_id_to_c_id',
                         type = doc_type,
                         source = {"query" : {"constant_score":{"filter":{"term":{ "m_id" : media_id}}}}},
                         )

    if not rr['hits']['hits']:

        raise tornado.gen.Return([])
    
    else:
        rr = rr['hits']['hits'][0]
        #Lookup all media IDs in that cluster:
        
        rr = yield es.search(index = index_name + '_c_id_to_m_id',
                             type = doc_type,
                             source = {"query" : {"constant_score":{"filter":{"term":{ "c_id" : media_id}}}}},
                             )

        raise tornado.gen.Return(rr)


def dedupe_regenerate(duplicate_type = 'baseline',
                      regenerate_all = True,
                      ):
    """
    Regenerate duplicate lookup tables.

    Note: Usually it's considerably more efficient to do this in large batches than to attempt to dedupe online,
    for each new media file.
    
    Args: 
        duplicate_type:  Semantic duplicate type. For now, defaults to 'baseline'.
        regenerate_all:  Regenerate all duplicate clusters. Otherwise, only regenerate clusters affected by new
                         media additions.
    
    Returns:
        TODO
    """
    pass

functions=['dedupe_all',
           ]

def main():    
    setup_main(functions,
               globals(),
               )

if __name__ == '__main__':
    main()

